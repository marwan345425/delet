import os
import asyncio
from datetime import datetime
from flask import Flask
from threading import Thread
from telethon import TelegramClient, events
from telethon.sessions import StringSession
from telethon.tl.types import MessageMediaPhoto, MessageMediaDocument, DocumentAttributeAudio, DocumentAttributeVideo

# --- معلوماتك الخاصة ---
api_id = 22575615
api_hash = "c77e3b35d6b1b2b35b35020d69077d8d"
string_session = "1BJWap1sBuwobNG23aASuu7R-lDCKPyydLh7tFLWHS_jHL4CWOVFDlw-8enulQfifvYKuJZkyq8Y03kWdjSVWJKKAL6iRGbZrspxxULh2RJ0Dw_Ex0CHvPGWqvIfCm5sPnKSeqdhs9N8QaWOiU_uFg55m2MkJe5z19BmADxBhp6OYu34lYS_mzZ2AdM8j81-hvQT-_sIwXPlWMER4CuYMGcOBXekPd02IYqiwue7LJfvWhtJyu4Di4KuL_PNIHrYke792uANKXaOVbKZEU7YDQLZ95ZqqSUFOL2rJx-FKkjIq_Ro4EqznaAjadCikgBx09htJNplsPh8RlSPuTZQDupwcusxZWGg="

client = TelegramClient(StringSession(string_session), api_id, api_hash)

# سيرفر صغير عشان Replit ما يطفى
app = Flask('')

@app.route('/')
def home():
    return "I'm alive!"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

# تخزين الرسائل القديمة (لتتبع التعديلات والحذف)
messages_dict = {}

# يوزر الشخص اللي تبغى ترسل له الإشعارات (غيره هنا)
forward_to_user = "@Leeo71"  # مثلاً هذا حساب الشخص اللي تبي توصله الرسائل

# دالة تنسيق التاريخ والوقت
def format_datetime(ts):
    return ts.strftime("%Y-%m-%d %H:%M:%S")

# دالة ترجع نص وصف محتوى الرسالة
def get_content_text(message):
    if message.media:
        if isinstance(message.media, MessageMediaPhoto):
            return "[صورة]"
        elif isinstance(message.media, MessageMediaDocument):
            attrs = message.media.document.attributes
            if any(isinstance(attr, DocumentAttributeVideo) for attr in attrs):
                return "[فيديو]"
            elif any(isinstance(attr, DocumentAttributeAudio) for attr in attrs):
                return "[صوت]"
            else:
                return "[مستند]"
        else:
            return "[ميديا]"
    else:
        return message.text or "[محتوى غير مدعوم]"

# دالة تنسيق الرسالة لإرسالها
def format_message(action_type, sender, original_text, new_text=None, username=None, message_date=None):
    formatted = f"📢 {action_type} من: {sender or 'مجهول'}\n"
    if action_type == "تم تعديل رسالة":
        formatted += f"\n📝 الرسالة قبل التعديل:\n{original_text}\n\n✏ الرسالة بعد التعديل:\n{new_text}"
    elif action_type == "تم حذف رسالة":
        formatted += f"\n🗑 المحتوى: {original_text or 'المحتوى غير محفوظ، ربما البوت بدأ بعد إرسال الرسالة.'}"
    else:
        formatted += f"\n{original_text}"
    formatted += f"\n\nاليوزر: {username or 'لا يوجد'}\nالوقت: {message_date or format_datetime(datetime.now())}"
    return formatted

@client.on(events.NewMessage(incoming=True))
async def new_message_handler(event):
    sender = await event.get_sender()
    if not event.is_private or sender is None or getattr(sender, "bot", False):
        return

    message_id = event.message.id
    messages_dict[message_id] = event.message

@client.on(events.MessageEdited)
async def edit_handler(event):
    if not event.is_private:
        return

    sender = await event.get_sender()
    if sender is None or getattr(sender, "bot", False):
        return

    old_message = messages_dict.get(event.message.id)
    sender_name = f"{sender.first_name or ''} {sender.last_name or ''}".strip()
    username = f"@{sender.username}" if sender.username else "لا يوجد"
    message_date = event.message.date.strftime("%Y-%m-%d %H:%M:%S")

    original_text = get_content_text(old_message) if old_message else "غير معروف"
    new_text = get_content_text(event.message)

    text = format_message("تم تعديل رسالة", sender_name, original_text, new_text, username, message_date)
    await client.send_message(forward_to_user, text)

    messages_dict[event.message.id] = event.message

@client.on(events.MessageDeleted)
async def delete_handler(event):
    for msg_id in event.deleted_ids:
        old_message = messages_dict.get(msg_id)
        if old_message is None or not old_message.is_private:
            continue

        sender = await old_message.get_sender()
        if sender is None:
            continue

        sender_name = f"{sender.first_name or ''} {sender.last_name or ''}".strip()
        username = f"@{sender.username}" if sender.username else "لا يوجد"
        message_date = old_message.date.strftime("%Y-%m-%d %H:%M:%S")

        content = get_content_text(old_message)
        text = format_message("تم حذف رسالة", sender_name, content, username=username, message_date=message_date)
        await client.send_message(forward_to_user, text)

async def main():
    keep_alive()  # يشغل السيرفر الصغير
    await client.start()
    print("✅ البوت شغال وبيراقب الرسائل ...")
    await client.run_until_disconnected()

if __name__ == "__main__":
    asyncio.run(main())
